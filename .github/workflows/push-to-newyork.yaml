name: Managing NGINX configs with GitHub and GitHub Actions

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  N1SC_Publish:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set miscellaneous environment variables 
      run: |
        echo "XC_API_TOKEN=${{ secrets.XC_API_TOKEN }}" >> $GITHUB_ENV
        echo "N1SC_TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> $GITHUB_ENV
        echo "N1SC_COMMIT_HASH=$(git rev-parse --short "$GITHUB_SHA")" >> $GITHUB_ENV
        echo "N1SC_BRANCH=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV

    - name: Set environment variables for base64 encoded config files
      run: |
        echo "NGINX_CONF_CONFIG_FILE=$(echo '# Modified by NGINX One API $(date) branch: ${{ env.N1SC_BRANCH }} commit hash: ${{ env.N1SC_COMMIT_HASH }}' | cat - newyork-01/etc/nginx/nginx.conf | base64 -w 0)" >> $GITHUB_ENV
        echo "MIME_TYPES_CONFIG_FILE=$(cat newyork-01/etc/nginx/mime.types | base64 -w 0)" >> $GITHUB_ENV
        echo "DEFAULT_CONF_CONFIG_FILE=$(cat newyork-01/etc/nginx/conf.d/default.conf | base64 -w 0)" >> $GITHUB_ENV

    - name: API call to NGINX One SaaS Console - Fetch Instances
      run: |
        curl --location 'https://${{ vars.N1SC_HOSTNAME }}${{ vars.N1SC_API_PATH }}/${{ vars.N1SC_NAMESPACE }}/instances/?filter_fields=instance_status&filter_ops=IN&filter_values=online&paginated=false' \
          -H 'Authorization: APIToken ${{ secrets.XC_API_TOKEN }}' -o instance_list.json
        cat instance_list.json

    - name: API call to NGINX One SaaS Console - Push Config
      run: |
        RESPONSE=$(curl -X PUT --location 'https://nginx-tenant1.staging.volterra.us/api/nginx/one/namespaces/default/instances/${{ vars.N1SC_INSTANCE }}/config' \
          -H 'Authorization: APIToken ${{ secrets.XC_API_TOKEN }}' \
          --data '{ "aux": [], "conf_path": "/etc/nginx/nginx.conf", "configs": [ { "files": [ { "contents": "${{ env.NGINX_CONF_CONFIG_FILE }}", "mtime": "1970-01-01T00:00:00Z", "name": "nginx.conf", "size": 2756 }, { "contents": "${{ env.MIME_TYPES_CONFIG_FILE }}", "mtime": "1970-01-01T00:00:00Z", "name": "mime.types", "size": 2756} ], "name": "/etc/nginx" }, { "files": [ { "contents": "${{ env.DEFAULT_CONF_CONFIG_FILE }}", "mtime": "1970-01-01T00:00:00Z", "name": "default.conf", "size": 908 } ], "name": "/etc/nginx/conf.d" }, { "files": [ { "contents": "${{ env.SSL_CERT }}", "mtime": "1970-01-01T00:00:00Z", "name": "server.crt", "size": 2048 }, { "contents": "${{ env.SSL_KEY }}", "mtime": "1970-01-01T00:00:00Z", "name": "server.key", "size": 2048 } ], "name": "/etc/nginx/ssl" }], "object_id": "inst_OaV4v1QXRGm_T1atbMbLJw" }' \
          -H "Content-Type: application/json")
        echo "Response: $RESPONSE"
        echo "$RESPONSE" | jq . || echo "Failed to parse JSON response"
